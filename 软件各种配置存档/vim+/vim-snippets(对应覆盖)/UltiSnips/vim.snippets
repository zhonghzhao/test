global !p
import re

def pythonenvironment():
	currentlr = int(vim.eval("line('.')"))
	for index in range(currentlr-1, -1, -1):
		line = vim.eval("getline(%d)" % index)
		if line == "EOF":
			return False
		if line.startswith("python"):
			return True
	else:
		return False
endglobal

snippet func "Snip template" b
function `!p
if not snip.c:
	if vim.eval("expand('%:p:h')").split("/")[-1] == "autoload":
		snip.rv = fn[:-4] + "#"
`${1:FUNC NAME}(${2:Args}) abort
$3
endfunction$0
endsnippet

context "not pythonenvironment()"
snippet pyfunc "Snip template" b
function `!p
if not snip.c:
	if vim.eval("expand('%:p:h')").split("/")[-1] == "autoload":
		snip.rv = fn[:-4] + "#"
`${1:FUNC NAME}(${2:}) abort
if has("python3")
python3 << EOF
import vim
`!p
arg_list = [x.strip() for x in t[2].split(",") if x.strip()]
for arg in arg_list:
	snip.rv += "%s = vim.eval('a:%s')\n" % (arg, arg)
`$3
EOF
endif
endfunction$0
endsnippet

context "not pythonenvironment()"
snippet command "command" b
command! ${1:COMMANDNAME} call ${2:FUNCNAME}()$0
endsnippet

context "not pythonenvironment()"
snippet if "if statement" bA
if $1
	$2
endif$0
endsnippet

snippet print(info) "print information" b
print("line [`!p if not snip.c: snip.rv = vim.eval("line('.')")`] `!p
info = t[1]
info = re.sub('"', '\\"', info)
snip.rv = info
`: ###%s###" % ($1))$0
endsnippet
