global !p
import re

def add_placeholder(snip):
    if snip.snippet_start[0] == snip.snippet_end[0]:
        start_col = snip.snippet_start[1]
        end_col = snip.snippet_end[1]
        line = snip.buffer[snip.line]
        info = line[start_col:end_col]
        left = line[0:start_col]
        right = line[end_col:]
        # print("###%s###, ###%s###, ###%s###" % (left, info, right))
        left = re.sub(r"(?!<\\)\$", r"\$", left)
        left = re.sub(r"(?!<\\)\.", r"\.", left)
        right = re.sub(r"(?!<\\)\$", r"\$", right)
        # print("###%s###, ###%s###, ###%s###" % (left, info, right))
        snip.buffer[snip.line] = ''
        snip.expand_anon(left + info + right)

def complete(input_str, candidate):
	candidate = [x[len(input_str):] for x in candidate if x.startswith(input_str)]
	if len(candidate) == 1:
		return candidate[0]
	elif "" in candidate:
		return ""
	elif candidate:
		return "(" + "|".join(candidate) + ")"
	else:
		return ""
endglobal


snippet snip "create snip" b
snippet $1 "${2:snippet}" $3
$4
`!p snip.rv = "endsnippet"`
endsnippet

snippet vsearch "snippet" w
int(vim.eval("search('$1'), 'n'"))
endsnippet

priority 1000
snippet "\breg\((.*)\)" "raw regrex string" wr
`!p
regrex_string = match.group(1)
regrex_string = re.sub('"', r'\"', regrex_string)
regrex_string = re.sub('\'', r'\'', regrex_string)
snip.rv = '"' + regrex_string + '"'
`
endsnippet

snippet "rv" "snip.rv" brA
snip.rv += $1
endsnippet

snippet "@@(\((\d+)\))?" "match.group" wr
match.group(${1:`!p
if not snip.c:
    if match.group(1):
        snip.rv = match.group(2)
    else:
        snip.rv = "1"
`})$0
endsnippet

snippet snip "Snip template" b
`!p snip.rv = "snippet"` ${1:Tab_trigger} "${2:Description}" ${3:w}
$4
`!p snip.rv = "endsnippet"`$0
endsnippet

snippet print(info) "print information" b
print("line [`!p if not snip.c: snip.rv = vim.eval("line('.')")`] `!p
info = t[1]
info = re.sub('"', '\\"', info)
snip.rv = info
`: ###%s###" % ($1))$0
endsnippet

snippet vimcurrentlinenumber "current line number" w
int(vim.eval("line('.')"))
endsnippet

snippet contentleft "current line number" w
vim.eval("getline('.')[:col('.')-2]")
endsnippet

snippet contentright "current line number" w
vim.eval("getline('.')[col('.')-1:]")
endsnippet

snippet vim? "what can be printed?" w
vim$1`!p
snip.rv = complete(t[1], ['currentlinenumber', 'currentline'])
`$0
endsnippet

# vim:ft=basicsnippets
